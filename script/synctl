#!/usr/bin/perl -l

use lib qw(/home/gauthier/Projets/perl-synctl/lib);
use strict;
use warnings;

use Getopt::Long qw(GetOptionsFromArray);

use Synctl qw(:verbose);
use Synctl::Profile;
use Synctl::Verbose;


my %MAINS = (
    'help'  => \&help_main,
    'init'  => \&init_main,
    'list'  => \&list_main,
    'send'  => \&send_main,
    'recv'  => \&recv_main,
    'rm'    => \&rm_main,
    'serve' => \&serve_main
    );

my %USAGES = (
    'help'  => \&help_usage,
    'init'  => \&init_usage,
    'list'  => \&list_usage,
    'send'  => \&send_usage,
    'recv'  => \&recv_usage,
    'rm'    => \&rm_usage,
    'serve' => \&serve_usage
    );

my %INFOS = (
    'help'  => 'obtain some help for a command',
    'init'  => 'initialize a local server',
    'list'  => 'list the snapshots of a given server',
    'send'  => 'send files to create a new snapshot',
    'recv'  => 'receive files from a given snapshot',
    'rm'    => 'remove snapshots of a given server',
    'serve' => 'serve ssh forwared requests'
    );


my $PROGRAM = 'synctl';
my $COMMAND = '';

my @PROFILE_PATH = qw(. ~/.config/synctl /etc/synctl);

my $VERBOSE = WARN;


sub error
{
    my ($message, $exitcode) = @_;

    if (!defined($message)) {
	$message = 'undefined error';
    }
    if (!defined($exitcode)) {
	$exitcode = 255;
    }

    printf(STDERR "%s%s: %s\n", $PROGRAM, $COMMAND, $message);
    printf(STDERR "Please type '%s --help' for more information\n", $PROGRAM);

    exit ($exitcode);
}

sub opterr
{
    my ($message) = @_;

    if ($message =~ /^Unknown option: (.*)$/) {
	error("unknown option '$1'");
    }

    printf(STDERR "%s", $message);
}

sub syncerr
{
    my ($code, $message) = @_;

    $code = lc($code);
    error("$code '$message'");
}

sub verbose
{
    my ($opt, $val) = @_;
    my $effect;
    my %effects = (
	0 => 0,
	1 => ERROR,
	2 => WARN ,
	3 => Synctl::synthetic(),
	4 => INFO,
	5 => DEBUG
	);

    if ($val < 0) {
	$VERBOSE++;
    } else {
	$VERBOSE = $val;
    }

    $effect = $effects{$VERBOSE};
    if (!defined($effect)) {
	$effect = DEBUG;
    }

    Synctl::Configure(VERBOSE => $effect);
}


sub find_profile
{
    my ($profile_name) = @_;
    my ($directory, $profile_path);

    foreach $directory (@PROFILE_PATH) {
	$profile_path = $directory . '/' . $profile_name;
	if (-e $profile_path && -r $profile_path) {
	    return $profile_path;
	}
    }

    return undef;
}

sub make_profile
{
    my ($profile_name, @profile_paths) = @_;
    my $profile = Synctl::Profile->new();
    my $profile_path;
    my $fh;

    if (@profile_paths) {
	@PROFILE_PATH = @profile_paths;
    }

    if (defined($profile_name)) {
	$profile_path = find_profile($profile_name);
	if (!defined($profile_path)) {
	    error("cannot find profile '$profile_name'");
	} else {
	    notify(DEBUG, ICONFIG, 'profile', $profile_path);
	}

	if (!open($fh, '<', $profile_path)) {
	    error("cannot open profile '$profile_path' : $!");
	} else {
	    $profile->read($fh);
	    close($fh);
	}
    }

    return $profile;
}


sub help_usage
{
    return <<"EOF";
Usage: $PROGRAM help [ --list | <command> ]

Print a help message for the given command indicating the possibles syntaxes
and their effects. If no command is given, print the general help message of
the program. If '--list' is specified instead of a command name, then print
exclusive list of the possible commands.
EOF
}

sub help_list
{
    my @commands = sort { $a cmp $b } keys(%INFOS);
    my ($length, $command);

    $length = 0;
    foreach $command (@commands) {
	if (length($command) > $length) {
	    $length = length($command);
	}
    }

    return "List of the possible commands of $PROGRAM:\n"
	. join("", map { sprintf('  %-'. $length ."s  %s\n", $_,$INFOS{$_}) }
	       @commands);
}

sub help_main
{
    my ($command, @err);
    my ($usage);

    $SIG{__WARN__} = \&opterr;
    Getopt::Long::Configure('permute');
    GetOptionsFromArray(
	\@_,
	'l|list'   => sub { printf("%s", help_list()); exit (0); },
	);
    $SIG{__WARN__} = undef;

    ($command, @err) = @_;

    if (@err) {
	error("unexpected argument '" . shift(@err) . "'");
    }

    if (defined($command)) {
	$usage = $USAGES{$command};
	if (!defined($usage)) {
	    error("unknown command '$usage'");
	}

	printf("%s", $usage->());
	exit (0);
    }

    printf("%s", usage());
    exit (0);
}


sub init_usage
{
    return <<"EOF";
Usage: $PROGRAM init [ -f | --force ] [ <path> ]
Initialize a local server at the specified path, or on the current directory
if no path is specified. The local server can then be used localy or remotely.

Options:
  --force      If path is an existing file, remove it before to proceed.
EOF
}

sub init_main
{
    my ($path, @err);
    my ($force) = (0);

    $SIG{__WARN__} = \&opterr;
    Getopt::Long::Configure('permute');
    GetOptionsFromArray(
	\@_,
	'f|force'      => \$force,
	'v|verbose:-1' => \&verbose
	);
    $SIG{__WARN__} = undef;

    ($path, @err) = @_;
    if (!defined($path)) {
	error('missing operand path');
    } elsif (@err) {
	error("unexpected argument '" . shift(@err) . "'");
    }

    if ($force && (-e $path)) {
	system('rm', '-rf', $path);
	notify(INFO, IFDELET, $path);
    }

    Synctl::init($path);
    return 0;
}


sub list_usage
{
    return <<"EOF";
Usage: $PROGRAM list [--older=<date>] [--newer=<date>] [--date=<regex>]
       [--invert] [--contain=<path>] [--reverse] [--format=<format>]
       [--directory=<path>[:<path>...]] [--server=<location> | <profile>]

Print the snapshots of the specified server. The server is specified either by
a profile containing the location of the server or with the '--server' option.
If specified by profile, the search path for the profile file can be changed
with the '--directory' option.

Several filters can be applied to the filter list. The options '--older',
'--newer' and '--date' filter the snapshots by their creation date while the
'--contain' option allow to select only snapshots containing specific files.
These filter options can be specified many times.

The snapshots are listed by chronological order. This can be modified with the
'--reverse' option to list snapshots newest first. The '--format' option allows
to choose precisely what to print.

Options:
  -C <path>, --directory=<path>         Change the search path for the profile
                                        file. This options may be specified
                                        many times to indicate many search
                                        directories.

  -s <location>, --server=<location>    Indicate the location of the server to
                                        list. A location has the form
                                        '(protocol)://(path)(path-extensions)'.
                                        If the protocol is 'file', it may be
                                        omitted.


  -o <date>, --older=<date>             List only snapshots older than the
                                        specified date. A date is a prefix of
                                        a string like 'YYYY-mm-dd-HH-MM-SS'.

  -n <date>, --newer=<date>             List only snapshots older than the
                                        specified date. A date is a prefix of
                                        a string like 'YYYY-mm-dd-HH-MM-SS'.

  -d <regex>, --date=<regex>            List only snapshots having a creation
                                        date matching the given perl-regex.

  -i, --invert                          Change the behavior of the '--date'
                                        option to list only the snapshots
                                        having a creation date *not* matching
                                        the perl-regex.

  -c <path>, --contain=<path>           List only the snapshots containing the
                                        specified file relative to the snapshot
                                        root.


  -r, --reverse                         Print the snapshots the newest first.

  -f <format>, --format=<format>        Specify the print format, which is a
                                        string where the following replacements
                                        are made :

    %Y    Year of the snapshot creation (0000 .. 1970 .. )
    %m    Month of the snapshot creation (01 .. 12)
    %d    Day of month of the snapshot creation (01 .. 31)
    %H    Hour of the snapshot creation (00 .. 23)
    %M    Minute of the snapshot creation (00 .. 59)
    %S    Second of the snapshot creation (00 .. 59)
    %u    Unique identifier of the snapshot (32 x 0..f)
EOF
}

sub list_main
{
    my ($profile_name, @err);
    my (@profile_paths, $older, $newer, $date, $invert, @contains, $reverse);
    my ($server, $format);
    my ($profile, $ndate, $path, $text, $controler, @snapshots, $snapshot);
    my ($Y, $m, $d, $H, $M, $S, $u);

    $format = "%Y-%m-%d-%H-%M-%S-%u";

    $SIG{__WARN__} = \&opterr;
    Getopt::Long::Configure('permute');
    GetOptionsFromArray(
	\@_,
	'C|directory=s' => \@profile_paths,
	'o|older=s'     => \$older,
	'n|newer=s'     => \$newer,
	'd|date=s'      => \$date,
	'i|invert'      => \$invert,
	'c|contain=s'   => \@contains,
	'r|reverse'     => \$reverse,
	'f|format=s'    => \$format,
	's|server=s'    => \$server,
	'v|verbose:-1'  => \&verbose
	);
    $SIG{__WARN__} = undef;

    ($profile_name, @err) = @_;

    if (@err) {
	error("unexpected argument '" . shift(@err) . "'");
    }

    $profile = make_profile($profile_name, @profile_paths);

    if (!defined($server)) { $server = $profile->server(); }
    if (!defined($server)) {
	error("missing server location");
    } else {
	notify(DEBUG, ICONFIG, 'server', $server);
    }

    if (defined($older)) {
	$ndate = $older;
	if (length($ndate) < 19) {
	    $ndate .= substr('9999-99-99-99-99-99', length($older));
	}
	if (!($ndate =~ /^\d{4}(-\d\d){5}$/)) {
	    error("invalid older option: '$older'");
	}
    }

    if (defined($newer)) {
	$ndate = $newer;
	if (length($ndate) < 19) {
	    $ndate .= substr('9999-99-99-99-99-99', length($newer));
	}
	if (!($ndate =~ /^\d{4}(-\d\d){5}$/)) {
	    error("invalid newer option: '$newer'");
	}
    }

    $controler = Synctl::controler($server);
    @snapshots = $controler->snapshot();

    @snapshots = grep {
	if    (defined($older) && $_->date() ge $older)    { 0; }
	elsif (defined($newer) && $_->date() le $newer)    { 0; }
	elsif (defined($date) && $_->date() =~ /$date/
	       && $invert)                                 { 0; }
	elsif (defined($date) && !($_->date() =~ /$date/)
	       && !$invert)                                { 0; }
        else                                               { 1; }
    } @snapshots;

    foreach $path (@contains) {
	@snapshots = grep {
	    defined($_->get_properties($path));
	} @snapshots;
    }

    @snapshots = sort { $a->date() cmp $b->date() } @snapshots;
    if (defined($reverse)) {
	@snapshots = reverse(@snapshots);
    }

    foreach $snapshot (@snapshots) {
	$snapshot->date() =~
	    m|^(\d{4})-(\d\d)-(\d\d)-(\d\d)-(\d\d)-(\d\d)-(.*)$|;
	($Y, $m, $d, $H, $M, $S, $u) = ($1, $2, $3, $4, $5, $6, $7);

	$text = $format;
	$text =~ s|(%%)*%Y|$Y|g;
	$text =~ s|(%%)*%m|$m|g;
	$text =~ s|(%%)*%d|$d|g;
	$text =~ s|(%%)*%H|$H|g;
	$text =~ s|(%%)*%M|$M|g;
	$text =~ s|(%%)*%S|$S|g;
	$text =~ s|(%%)*%u|$u|g;
	printf("%s\n", $text);
    }
}


sub send_usage
{
    return <<"EOF";
Usage: $PROGRAM send [--client=<path>] [--server=<location>]
       [--include=<filter>] [--exclude=<path>] [--directory=<path>[:<path>...]]
       <profile>

Send a new snapshot of the given client to the given server. Both the client
and the server are either specified by the profile or by the '--client' and
'--server' options. The client is an absolute or relative path while the server
is a location in the form <protocol>://<path>[:<remote-path>] where protocol
is one of 'file' for a local server or 'ssh' for a remote server. If the
protocol is 'file', than only the <path> may be specified.
If both the client and server are specified by options, the profile may be
omitted.

Some files may be excluded from the snapshot with the '--exclude' and
'--include' options. Each of these options may be specified multiple times with
a filter which can be either a glob path, starting by a '/' or a perl-regex.
For each seeked file of the client, the filters are applied in-order and the
first to match indicates if the file is included or excluded. If a directory is
excluded, its sub-files are *not* checked and automatically excluded.

The client path, server location or include/exclude filters may be specified
both in the profile and with the options. For the client and server, the option
have priority while include/exclude options are appended to the ones specified
in the profile.

Options:
  -C <path>, --directory=<path>         Change the search path for the profile
                                        file. This options may be specified
                                        many times to indicate many search
                                        directories.

  -c <path>, --client=<path>            Indicate the path of the client to
                                        send to the server as a new snapshot.

  -s <location>, --server=<location>    Indicate the location of the server to
                                        send the snapshot to. A location has
                                        the form
                                        <protocol>://<path><:remote-path>.
                                        If the protocol is 'file', it may be
                                        omitted.

  -i <filter>, --include=<filter>       Indicate the files matching the filter
                                        should be included in the snapshot.

  -e <filter>, --exclude=<filter>       Indicate the files matching the filter
                                        should be excluded of the snapshot.
EOF
}

sub send_main
{
    my ($profile_name, @err);
    my (@profile_paths, $client, $server, @filters);
    my ($profile, $controler);

    $SIG{__WARN__} = \&opterr;
    Getopt::Long::Configure('permute');
    GetOptionsFromArray(
	\@_,
	'C|directory=s' => \@profile_paths,
	'c|client=s'    => \$client,
	's|server=s'    => \$server,
	'i|include=s'   => sub { push(@filters, '+' . $_[1]) },
	'e|exclude=s'   => sub { push(@filters, '-' . $_[1]) },
	'v|verbose:-1'   => \&verbose
	);
    $SIG{__WARN__} = undef;

    ($profile_name, @err) = @_;

    if (@err) {
	error("unexpected argument '" . shift(@err) . "'");
    }

    $profile = make_profile($profile_name, @profile_paths);

    if (!defined($server)) { $server = $profile->server(); }
    if (!defined($server)) {
	error("missing server location");
    } else {
	notify(DEBUG, ICONFIG, 'server', $server);
    }

    if (!defined($client)) { $client = $profile->client(); }
    if (!defined($client)) {
	error("missing client location");
    } else {
	notify(DEBUG, ICONFIG, 'client', $client);
    }

    $profile->filters([ @{$profile->filters()}, @filters ]);

    notify(DEBUG, ICONFIG, 'filters',
	   '[' . join(', ', map { "'$_'" } @{$profile->filters()}) . ']');

    $controler = Synctl::controler($server);
    Synctl::send($client, $controler, $profile->filter());

    return 0;
}


sub recv_usage
{
    return <<"EOF";
Usage: $PROGRAM recv [--client=<path>] [--server=<location>]
       [--include=<filter>] [--exclude=<path>] [--directory=<path>[:<path>...]]
       <profile> [<snapshot>]

Receive a snapshot from a specified server to a client path. Both the client
and the server are either specified by the profile or by the '--client' and
'--server' options. The client is an absolute or relative path while the server
is a location in the form <protocol>://<path>[:<remote-path>] where protocol
is one of 'file' for a local server or 'ssh' for a remote server. If the
protocol is 'file', than only the <path> may be specified.
If both the client and server are specified by options, the profile may be
omitted. If the snapshot is omitted, the newest snapshot of the server is used,
otherwise it is a prefix of the expression 'YYYY-mm-dd-HH-MM-SS-u{32}'.
To omit the profile but specify the snapshot, the profile should be specified
as the empty string.

Some files may be excluded from the snapshot with the '--exclude' and
'--include' options. Each of these options may be specified multiple times with
a filter which can be either a glob path, starting by a '/' or a perl-regex.
For each seeked file of the client, the filters are applied in-order and the
first to match indicates if the file is included or excluded. If a directory is
excluded, its sub-files are *not* checked and automatically excluded.

The client path, server location or include/exclude filters may be specified
both in the profile and with the options. For the client and server, the option
have priority while include/exclude options are appended to the ones specified
in the profile.

Options:
  -C <path>, --directory=<path>         Change the search path for the profile
                                        file. This options may be specified
                                        many times to indicate many search
                                        directories.

  -c <path>, --client=<path>            Indicate the path of the client to
                                        send to the server as a new snapshot.

  -s <location>, --server=<location>    Indicate the location of the server to
                                        send the snapshot to. A location has
                                        the form
                                        <protocol>://<path><:remote-path>.
                                        If the protocol is 'file', it may be
                                        omitted.

  -i <filter>, --include=<filter>       Indicate the files matching the filter
                                        should be included in the snapshot.

  -e <filter>, --exclude=<filter>       Indicate the files matching the filter
                                        should be excluded of the snapshot.
EOF
}

sub recv_main
{
    my ($profile_name, $snapshot_date, @err);
    my (@profile_paths, $client, $server, @filters);
    my ($profile, $controler, $ndate, $snapshot, @snapshots);

    $SIG{__WARN__} = \&opterr;
    Getopt::Long::Configure('permute');
    GetOptionsFromArray(
	\@_,
	'C|directory=s' => \@profile_paths,
	'c|client=s'    => \$client,
	's|server=s'    => \$server,
	'i|include=s'   => sub { push(@filters, '+' . $_[1]) },
	'e|exclude=s'   => sub { push(@filters, '-' . $_[1]) },
	'v|verbose:-1'  => \&verbose
	);
    $SIG{__WARN__} = undef;

    ($profile_name, $snapshot_date, @err) = @_;

    if (@err) {
	error("unexpected argument '" . shift(@err) . "'");
    }

    $profile = make_profile($profile_name, @profile_paths);

    if (!defined($server)) { $server = $profile->server(); }
    if (!defined($server)) {
	error("missing server location");
    } else {
	notify(DEBUG, ICONFIG, 'server', $server);
    }

    if (!defined($client)) { $client = $profile->client(); }
    if (!defined($client)) {
	error("missing client location");
    } else {
	notify(DEBUG, ICONFIG, 'client', $client);
    }

    $profile->filters([ @{$profile->filters()}, @filters ]);

    notify(DEBUG, ICONFIG, 'filters',
	   '[' . join(', ', map { "'$_'" } @{$profile->filters()}) . ']');

    $controler = Synctl::controler($server);
    @snapshots = $controler->snapshot();
    @snapshots = sort { $a->date() le $b->date() } @snapshots;

    if (!@snapshots) {
	error("no snapshot available");
    }

    if (defined($snapshot_date)) {
	if (substr($snapshot_date, 0, 1) ne '^') {
	    $snapshot_date = '^' . $snapshot_date;
	}

	foreach (@snapshots) {
	    if ($_->date() =~ $snapshot_date) {
		$snapshot = $_;
		last;
	    }
	}

	if (!defined($snapshot)) {
	    error("no snapshot matching '$snapshot_date'");
	}
    } else {
	$snapshot = shift(@snapshots);
    }

    notify(DEBUG, ICONFIG, 'snapshot', $snapshot->date());

    Synctl::recv($controler, $snapshot, $client, $profile->filter());

    return 0;
}


sub rm_usage
{
    return <<"EOF";
Usage: $PROGRAM rm [--directory=<path>[:<path>]] [--force]
       [--server=<location> | <profile>] <snapshot> [<snapshots...>]

Remove one or several snapshots from the specified server. The server can be
specified either in the profile or with the '--server' option. In this last
case, the profile may be omitted. The snapshots are prefixes of the expression
'YYYY-mm-dd-HH-MM-SS-u{32}'.

By default, ask confirmation before to remove any snapshot, unless the
'--force' option is specified.

Options:
  -C <path>, --directory=<path>         Change the search path for the profile
                                        file. This options may be specified
                                        many times to indicate many search
                                        directories.

  -s <location>, --server=<location>    Indicate the location of the server to
                                        remove the snapshot from. A location
                                        has the form
                                        <protocol>://<path><:remote-path>.
                                        If the protocol is 'file', it may be
                                        omitted.

  -f, --force                           Avoid to ask confirmation before to
                                        remove the snapshots.
EOF
}

sub rm_main
{
    my ($profile_name, @snapshot_dates);
    my (@profile_paths, $server, $force);
    my ($profile, $controler, $date, @snapshots, %selection, $answer);

    $SIG{__WARN__} = \&opterr;
    Getopt::Long::Configure('permute');
    GetOptionsFromArray(
	\@_,
	'C|directory=s' => \@profile_paths,
	'f|force'       => \$force,
	's|server=s'    => \$server,
	'v|verbose:-1'  => \&verbose
	);
    $SIG{__WARN__} = undef;

    if (defined($server)) {
	(@snapshot_dates) = @_;
	$profile_name = '';
    } else {
	($profile_name, @snapshot_dates) = @_;
    }

    if (!@snapshot_dates) {
	error('missing snapshot operand');
    }

    $profile = make_profile($profile_name, @profile_paths);

    if (!defined($server)) { $server = $profile->server(); }
    if (!defined($server)) {
	error('missing server location');
    } else {
	notify(DEBUG, ICONFIG, 'server', $server);
    }

    $controler = Synctl::controler($server);
    @snapshots = $controler->snapshot();

    if (!@snapshots) {
	error('no snapshot available');
    }

    foreach $date (@snapshot_dates) {
	if (substr($date, 0, 1) ne '^') {
	    $date = '^' . $date;
	}

	foreach (@snapshots) {
	    if ($_->date() =~ $date) {
		$selection{$_->date()} = $_;
	    }
	}
    }

    if (!%selection) {
	error('no valid snapshot selected');
    }

    if ($force) {
	foreach (sort { $a cmp $b } map { $_->date() } values(%selection)) {
	    notify(DEBUG, ICONFIG, 'snapshot', $_);
	}
    } else {
	printf("Following snapshots will be removed:\n");
	foreach (sort { $a cmp $b } map { $_->date() } values(%selection)) {
	    printf("  %s\n", $_);
	}
	printf("Are you sure [y/N] ? ");
	$| = 1;

	chomp($answer = <STDIN>);
	if (lc($answer) ne 'y') {
	    return 1;
	}
    }

    foreach (values(%selection)) {
	$controler->delete($_);
    }

    return 0;
}


sub serve_usage
{
    return <<"EOF";
Usage: $PROGRAM serve <path>

Start the program in server mode. This command is not intended to be used by
human but instead serves as an ssh backend. The given path is the path of the
local server.
EOF
}

sub serve_main
{
    my ($path, @err) = @_;
    my $controler;

    if (!defined($path)) {
	error("missing server location");
    } elsif (@err) {
	error("unexpected argument '" . shift(@err) . "'");
    }

    $controler = Synctl::controler($path);
    return Synctl::serve($controler);
}


sub usage
{
    return <<"EOF";
Usage: $PROGRAM [ -h | --help ] [ -V | --version ] <command> <args...>

Backup and restore some files localy or throught ssh. The backups are
incremental and old backups can be removed.

Commands:
  help                        Print the help message for a given command.
  init                        Initialize a new backup server.
  list                        List the backups on a given server.
  send                        Make a new backup on a given server.
  recv                        Restore from a backup on a given server.

Options:
  -h, --help                  Print this help message and exit.

  -V, --version               Print the version information and exit.

  -v, --verbose [<level>]     Change the verbosity level. If specified with an
                              argument, defines the new level, from 0 (nothing)
                              to 4 (debug). If specified without an argument,
                              increment the level by 1. The default level is 2
                              (warning).
EOF
}

sub version
{
    return sprintf("%s %s\n%s\n%s\n",
		   'synctl', $Synctl::VERSION,
		   $Synctl::AUTHOR, $Synctl::MAILTO);
}

sub main
{
    my ($command, @args);
    my ($main);
    
    $PROGRAM = $0;
    $PROGRAM =~ s|^.*/||;

    $SIG{__WARN__} = \&opterr;
    Getopt::Long::Configure('bundling');
    Getopt::Long::Configure('require_order');
    GetOptionsFromArray(
	\@_,
	'h|help'       => sub { printf("%s", usage()); exit (0); },
	'V|version'    => sub { printf("%s", version()); exit (0); },
	'v|verbose:-1' => \&verbose
	);
    $SIG{__WARN__} = undef;

    ($command, @args) = @_;
    if (!defined($command)) {
	error('missing command operand');
    }
    
    $main = $MAINS{$command};
    if (!defined($main)) {
	error("unknown command '$command'");
    }

    $COMMAND = " $command";
    Synctl::Configure(ERROR => \&syncerr);
    return $main->(@args);
}

exit (main(@ARGV));


1;
__END__
